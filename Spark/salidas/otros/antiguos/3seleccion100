//Mostrar solamente los mensajes de ERROR
import org.apache.log4j.{Level, Logger}
var rootLogger = Logger.getRootLogger()
rootLogger.setLevel(Level.WARN)
//Importación de las librerías
import org.apache.spark.SparkContext
import org.apache.spark.SparkConf
import org.apache.spark.rdd._
import org.apache.spark.mllib.linalg.Vectors
import org.apache.spark.mllib.regression.LabeledPoint
import org.apache.spark.mllib.evaluation.MulticlassMetrics
import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics
import org.apache.spark.mllib.classification.kNN_IS.kNN_IS
import utils.keel.KeelParser
import scala.collection.mutable.ListBuffer
//Random Forest
import org.apache.spark.mllib.tree.RandomForest
import org.apache.spark.mllib.tree.model.RandomForestModel
import org.apache.spark.mllib.util.MLUtils
//Naive Bayes
import org.apache.spark.mllib.classification.{NaiveBayes, NaiveBayesModel}
import org.apache.spark.mllib.linalg.Vectors
//Decision Trees
import org.apache.spark.mllib.tree.DecisionTree
import org.apache.spark.mllib.tree.model.DecisionTreeModel
import org.apache.spark.mllib.util.MLUtils
//Discretizar Valores
import org.apache.spark.mllib.feature.MDLPDiscretizer
//Selección de características
import org.apache.spark.mllib.feature._
//Fichero para imprimir las salidas
import java.io._
val writer = new PrintWriter(new File("3seleccion200salida.txt"))
//Obtenemos los resultados
import org.apache.spark.mllib.evaluation._


//Carga de los datasets
val converter = new KeelParser(sc, "hdfs://hadoop-master/user/spark/datasets/ECBDL14_mbd/ecbdl14.header")
val train = sc.textFile("hdfs://hadoop-master/user/spark/datasets/ECBDL14_mbd/ecbdl14tra.data", 6).map(line => converter.parserToLabeledPoint(line)).coalesce(6).cache()
writer.write("En train las instancias son: " + train.count() + "\n")
val test = sc.textFile("hdfs://hadoop-master/user/spark/datasets/ECBDL14_mbd/ecbdl14tst.data", 6).map(line => converter.parserToLabeledPoint(line)).cache()
writer.write("En test las instancias son: " + test.count())


//DISCRETIZACIÓN DE LOS DATOS
writer.write("Comienzo Discretización de los Datos con los siguientes parámetros:" + "\n")
val tiempo_inicial = System.currentTimeMillis / 1000
val categoricalFeat: Option[Seq[Int]] = None
val nBins = 15
val maxByPart = 10000
writer.write("\t*** Discretization method: Fayyad discretizer (MDLP)\n")
writer.write("\tcategoricalFeat: Option[Seq[Int]] = None \n")
writer.write("\tNumber of bins: " + nBins + "\n")
writer.write("\tMax By Part: " + maxByPart + "\n")
//Los datos deben almacenarse en cache para mejorar el rendimiento
val discretizer = MDLPDiscretizer.train(train, // RDD[LabeledPoint]
    categoricalFeat, // continuous features
    nBins, // max number of thresholds by feature
    maxByPart) // max elements per partition
discretizer
//Discretizamos el train
val discreteTrain = train.map(i => LabeledPoint(i.label, discretizer.transform(i.features))).cache()
discreteTrain.first()
//Discretizamos el test
val discreteTest = test.map(i => LabeledPoint(i.label, discretizer.transform(i.features))).cache()
val segundos = (System.currentTimeMillis / 1000) - tiempo_inicial
val minutos = segundos / 60
writer.write("Fin de Discretización de los datos con una duración de: " + segundos + " segundos o de " +  minutos + " minutos" + "\n\n")


//SELECCIÓN DE CARACTERÍSTICAS SOBRE LOS DATOS DISCRETIZADOS
writer.write("Comienzo Selección de características con los datos discretizados y los siguientes parámetros:" + "\n")
val tiempo_inicial = System.currentTimeMillis / 1000
val criterion = new InfoThCriterionFactory("mrmr")
val nToSelect = 200
val nPartitions = 6
writer.write("\t*** FS criterion: " + criterion.getCriterion.toString)
writer.write("\n\tNumber of features to select: " + nToSelect)
writer.write("\n\tNumber of partitions: " + nPartitions)
val featureSelector = new InfoThSelector(criterion, nToSelect, nPartitions).fit(discreteTrain)
val reducedTrain200 = discreteTrain.map(i => LabeledPoint(i.label, featureSelector.transform(i.features))).cache()
//Ahora el test
val reducedTest200 = discreteTrain.map(i => LabeledPoint(i.label, featureSelector.transform(i.features))).cache()
val segundos = (System.currentTimeMillis / 1000) - tiempo_inicial
val minutos = segundos / 60
writer.write("\nEn el nuevo train las instancias son: " + reducedTrain200.count() + "\n")
writer.write("En el nuevo test las instancias son: " + reducedTest200.count())
writer.write("\nFin de selección de características con los datos discretizados y con una duración de: " + segundos + " segundos o de " +  minutos + " minutos" + "\n")


//RANDOM FOREST 
writer.write("\nComienzo Random Forest con los siguientes parámetros:" + "\n")
val tiempo_inicial = System.currentTimeMillis / 1000
val numClasses = 2
val categoricalFeaturesInfo = Map[Int, Int]()
val numTrees = 10 
val featureSubsetStrategy = "auto" 
val impurity = "gini"
val maxDepth = 4
val maxBins = 32
writer.write("\tNumClasses: " + numClasses + "\n\tcategoricalFeaturesInfo: Map[Int, Int]()" + "\n\tnumTrees: " + numTrees + "\n\tfeatureSubsetStrategy: " + featureSubsetStrategy + "\n\timpurity: " + impurity + "\n\tmaxDepth: " + maxDepth + "\n\tmaxBins: " + maxBins + "\n")
val model = RandomForest.trainClassifier(reducedTrain200, numClasses, categoricalFeaturesInfo,
  numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)
//Evaluamos el modelo con el test
val predsAndLabels = reducedTest200.map { point =>
  val prediction = model.predict(point.features)
  (prediction, point.label)
}
//Obtenemos el test error
writer.write("Resultados:")
val testErr_rf2 = predsAndLabels.filter(r => r._1 != r._2).count.toDouble / reducedTest200.count()
writer.write("\n\tTest Error= " + testErr_rf2)
//println("Learned model:\n" + model.toDebugString) //Mostramos el modelo COMENTADO
//Mostramos los resultados pormenorizados
val metrics_rf2 = new MulticlassMetrics(predsAndLabels)
writer.write("\n\tPrecisión: " + metrics_rf2.precision)
writer.write("\n\tMatriz de confusión: \n" + metrics_rf2.confusionMatrix )
val binaryMetrics_rf2 = new BinaryClassificationMetrics(predsAndLabels)
val area_under_ROC_rf2 = binaryMetrics_rf2.areaUnderROC
writer.write("\n\tArea bajo la curva ROC = " + area_under_ROC_rf2)
val segundos = (System.currentTimeMillis / 1000) - tiempo_inicial
val minutos = segundos / 60
writer.write("\nFin de Random Forest con una duración de: " + segundos + " segundos o de " +  minutos + " minutos" + "\n\n")


//NAIVE BAYES 
writer.write("Comienzo Naive Bayes con los siguientes parámetros:" + "\n")
val tiempo_inicial = System.currentTimeMillis / 1000
//Creamos el modelo
val miLambda = 1.0
val miModelType = "multinomial"
writer.write("\tlambda: " + miLambda + "\n\tmodelType: " + miModelType + "\n")
val model = NaiveBayes.train(reducedTrain200, lambda = miLambda, modelType = miModelType)
//Evaluamos el modelo
val predsAndLabels = reducedTest200.map { point =>
  val prediction = model.predict(point.features)
  (prediction, point.label)
}
//Obtenemos el test error
writer.write("Resultados:")
val testErr_nb2 = predsAndLabels.filter(r => r._1 != r._2).count.toDouble / reducedTest200.count()
writer.write("\n\tTestError= " + testErr_nb2)
//Mostramos los resultados pormenorizados
val metrics_nb2 = new MulticlassMetrics(predsAndLabels)
writer.write("\n\tPrecisión: " + metrics_nb2.precision)
writer.write("\n\tMatriz de confusión: \n" + metrics_nb2.confusionMatrix )
val binaryMetrics_nb2 = new BinaryClassificationMetrics(predsAndLabels)
val area_under_ROC_nb2 = binaryMetrics_nb2.areaUnderROC
writer.write("\n\tArea bajo la curva ROC = " + area_under_ROC_nb2)
val segundos = (System.currentTimeMillis / 1000) - tiempo_inicial
val minutos = segundos / 60
writer.write("\nFin de Naive Bayes con una duración de: " + segundos + " segundos o de " +  minutos + " minutos" + "\n")


//DECISION TREES 
writer.write("Comienzo Decision Trees con los siguientes parámetros:" + "\n")
val tiempo_inicial = System.currentTimeMillis / 1000
//Configuramos el modelo y lo entrenamos
val numClasses = 2
val categoricalFeaturesInfo = Map[Int, Int]()
val impurity = "gini"
val maxDepth = 4
val maxBins = 32
writer.write("\tNumClasses: " + numClasses + "\n\tcategoricalFeaturesInfo: Map[Int, Int]()" + "\n\timpurity: " + impurity + "\n\tmaxDepth: " + maxDepth + "\n\tmaxBins: " + maxBins + "\n")
val model = DecisionTree.trainClassifier(reducedTrain200, numClasses, categoricalFeaturesInfo,
  impurity, maxDepth, maxBins)
//Evaluamos el modelo con el test
val predsAndLabels = reducedTest200.map { point =>
  val prediction = model.predict(point.features)
  (prediction, point.label)
}
//Obtenemos el test error
writer.write("Resultados:")
val testErr_dt2 = predsAndLabels.filter(r => r._1 != r._2).count.toDouble / reducedTest200.count() 
writer.write("\n\tTestError= " + testErr_dt2)
//println("Learned model:\n" + model.toDebugString) //Mostramos el modelo
//Mostramos los resultados pormenorizados
val metrics_dt2 = new MulticlassMetrics(predsAndLabels)
writer.write("\n\tPrecisión: " + metrics_dt2.precision)
writer.write("\n\tMatriz de confusión: \n" + metrics_dt2.confusionMatrix )
val binaryMetrics_dt2 = new BinaryClassificationMetrics(predsAndLabels)
val area_under_ROC_dt2 = binaryMetrics_dt2.areaUnderROC
writer.write("\n\tArea bajo la curva ROC = " + area_under_ROC_dt2)
val segundos = (System.currentTimeMillis / 1000) - tiempo_inicial
val minutos = segundos / 60
writer.write("\nFin de Decision Trees con una duración de: " + segundos + " segundos o de " +  minutos + " minutos" + "\n\n")

writer.close()

reducedTest200.saveAsTextFile("hdfs://hadoop-master/user/mdat20076629/DTSpark/test200/");
reducedTrain200.saveAsTextFile("hdfs://hadoop-master/user/mdat20076629/DTSpark/train200/");

exit
